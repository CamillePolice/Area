{
    "openapi": "3.0.2",
    "info": {
        "title": "Area API",
        "description": "A simple API to allow users to trigger reactions from actions.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Authentication\n\nAREA offers one form of authentication:\n  - [Basic access authentication](https://tools.ietf.org/html/rfc7617)\n is a method for an HTTP user agent (e.g. a web browser) to provide a user name and password when making a request. In basic HTTP authentication, a request contains a header field in the form of Authorization: Basic <credentials>, where credentials is the base64 encoding of id and password joined by a single colon :.\n<SecurityDefinitions />\n",
        "version": "0.0.0"
    },
    "servers": [
        {
            "url": "https://area.marc0.fr/api",
            "description": "Marco VPS"
        }
    ],
    "security": [
        {
            "BasicAuth": []
        }
    ],
    "paths": {
        "/user/signup": {
            "post": {
                "tags": ["User management"],
                "summary": "Signup a new user",
                "description": "The server will decompose Authorization header to extract email and password. The password can come from a form or can be a Google login token.",
                "requestBody": {
                    "$ref": "#/components/requestBodies/User"
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid form : email formating or password length less than 6"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "description": "This user already exists : email address conflict"
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "tags": ["User management"],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Email or password does not match, or the account with this email does not exist"
                    }
                }
            },
            "put": {
                "tags": ["User management"],
                "summary": "Modify user profile",
                "requestBody": {
                    "$ref": "#/components/requestBodies/User"
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid form : email formating or password length less than 6"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "User indentify by email don't exist"
                    }
                }
            },
            "delete": {
                "tags": ["User management"],
                "summary": "Delete user profile",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Email or password does not match, or the account with this email does not exist"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "User": {
                "type": "object",
                "properties": {
                    "firstName": {
                        "type": "string",
                        "description": "User first name",
                        "example": "Vincent"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User last name",
                        "example": "Moscato"
                    },
                    "email": {
                        "type": "string",
                        "description": "User email address",
                        "example": "vincent.moscato@rmc.fr"
                    }
                }
            }
        },
        "requestBodies": {
            "User": {
                "description": "User model",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                }
            }
        },
        "responses": {
            "UnauthorizedError": {
                "description": "Authentication information is missing or invalid",
                "headers": {
                    "WWW-Authenticate": {
                        "description": "Authorization header : Basic",
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "example": "WWW-Authenticate: Basic realm=AREA-server"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "BasicAuth": {
                "type": "http",
                "scheme": "basic",
                "description": "The client sends HTTP requests with the Authorization header that contains the word Basic word followed by a space and a base64-encoded string email:password."
            }
        }
    }
}
